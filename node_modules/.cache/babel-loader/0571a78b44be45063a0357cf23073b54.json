{"ast":null,"code":"import _defineProperty from \"E:\\\\Jack\\\\Documents\\\\Programming\\\\shoe-store\\\\Golden-Shoe-Store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\Jack\\\\Documents\\\\Programming\\\\shoe-store\\\\Golden-Shoe-Store\\\\src\\\\context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { storeProducts, detailProduct } from \"./data\"; // Creating a provider and consumer for the information\n\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      detailProduct: detailProduct,\n      cart: [],\n      modalOpen: false,\n      modalProduct: detailProduct,\n      cartSubTotal: 0,\n      cartVAT: 0,\n      cartTotal: 0\n    };\n\n    this.setFeaturedProducts = () => {\n      const product = this.getItem();\n      this.setState(() => {\n        return {\n          product: product.id = 4\n        };\n      });\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = _objectSpread({}, item);\n\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product],\n          detailProduct: _objectSpread({}, product)\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          modalProduct: product,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.increment = id => {\n      // Get cart values from the current state\n      let tempCart = [...this.state.cart];\n      const incProduct = tempCart.find(item => {\n        return item.id === id;\n      }); // Get index of item to be incremented\n\n      const index = tempCart.indexOf(incProduct);\n      const product = tempCart[index]; // Add to the count and total\n\n      product.count = product.count + 1;\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, this.addTotals());\n    };\n\n    this.decrement = id => {\n      // Get cart values from the current state\n      let tempCart = [...this.state.cart];\n      const decProduct = tempCart.find(item => {\n        return item.id === id;\n      }); // Get index of item to be decremented\n\n      const index = tempCart.indexOf(decProduct);\n      const product = tempCart[index]; // Subtract from the count and total\n\n      product.count = product.count - 1;\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n        this.setState(() => {\n          return {\n            cart: [...tempCart]\n          };\n        }, this.addTotals());\n      }\n    };\n\n    this.removeItem = id => {\n      // Get products from the current state\n      let tempProducts = [...this.state.products]; // Get cart values from the current state\n\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removeProduct = tempProducts[index];\n      removeProduct.inCart = false;\n      removeProduct.count = 0;\n      removeProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          product: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = id => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.setProducts();\n        this.addTotals();\n      });\n    };\n\n    this.getTotals = () => {\n      // Retrieve the current sub total from current state\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total); // Calculate VAT from sub total\n\n      const tempVAT = subTotal * 0.2;\n      const VAT = parseFloat(tempVAT.toFixed(2)); // Add VAT and sub total together for total\n\n      const tempTotal = subTotal + VAT;\n      const total = parseFloat(tempTotal.toFixed(2));\n      return {\n        subTotal,\n        VAT,\n        total\n      };\n    };\n\n    this.addTotals = () => {\n      const totals = this.getTotals();\n      this.setState(() => {\n        return {\n          cartSubTotal: totals.subTotal,\n          cartVAT: totals.VAT,\n          cartTotal: totals.total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setProducts();\n  }\n\n  render() {\n    return React.createElement(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["E:/Jack/Documents/Programming/shoe-store/Golden-Shoe-Store/src/context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","modalOpen","modalProduct","cartSubTotal","cartVAT","cartTotal","setFeaturedProducts","product","getItem","setState","id","setProducts","tempProducts","forEach","item","singleItem","find","handleDetail","addToCart","index","indexOf","inCart","count","price","total","addTotals","openModal","closeModal","increment","tempCart","incProduct","decrement","decProduct","removeItem","filter","removeProduct","clearCart","getTotals","subTotal","map","tempVAT","VAT","parseFloat","toFixed","tempTotal","totals","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { storeProducts, detailProduct } from \"./data\";\r\n\r\n// Creating a provider and consumer for the information\r\nconst ProductContext = React.createContext();\r\n\r\nclass ProductProvider extends Component {\r\n  state = {\r\n    products: [],\r\n    detailProduct: detailProduct,\r\n    cart: [],\r\n    modalOpen: false,\r\n    modalProduct: detailProduct,\r\n    cartSubTotal: 0,\r\n    cartVAT: 0,\r\n    cartTotal: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setProducts();\r\n  }\r\n\r\n  setFeaturedProducts = () => {\r\n    const product = this.getItem();\r\n    this.setState (() => {\r\n      return {product: product.id = 4}\r\n    })\r\n  }\r\n\r\n  // Obtain copy of values from data.js\r\n  setProducts = () => {\r\n    let tempProducts = [];\r\n    storeProducts.forEach(item => {\r\n      const singleItem = { ...item };\r\n      tempProducts = [...tempProducts, singleItem];\r\n    });\r\n    this.setState(() => {\r\n      return { products: tempProducts };\r\n    });\r\n  };\r\n\r\n  // Get the id values of an item\r\n  getItem = id => {\r\n    const product = this.state.products.find(item => item.id === id);\r\n    return product;\r\n  };\r\n\r\n  // Set the template product to our current product\r\n  handleDetail = id => {\r\n    const product = this.getItem(id);\r\n    this.setState(() => {\r\n      return { detailProduct: product };\r\n    });\r\n  };\r\n\r\n  // Add the specific object to cart using id\r\n  addToCart = id => {\r\n    let tempProducts = [...this.state.products];\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    const product = tempProducts[index];\r\n    product.inCart = true;\r\n    product.count = 1;\r\n    const price = product.price;\r\n    product.total = price;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          products: tempProducts,\r\n          cart: [...this.state.cart, product],\r\n          detailProduct: { ...product }\r\n        };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  // Open modal when clicked on image\r\n  openModal = id => {\r\n    const product = this.getItem(id);\r\n    this.setState(() => {\r\n      return { modalProduct: product, modalOpen: true };\r\n    });\r\n  };\r\n\r\n  // Close modal when clicked back or checkout\r\n  closeModal = () => {\r\n    this.setState(() => {\r\n      return { modalOpen: false };\r\n    });\r\n  };\r\n\r\n  // Add one to the selected item in cart\r\n  increment = id => {\r\n    // Get cart values from the current state\r\n    let tempCart = [...this.state.cart];\r\n    const incProduct = tempCart.find(item => {\r\n      return item.id === id;\r\n    });\r\n\r\n    // Get index of item to be incremented\r\n    const index = tempCart.indexOf(incProduct);\r\n    const product = tempCart[index];\r\n\r\n    // Add to the count and total\r\n    product.count = product.count + 1;\r\n    product.total = product.count * product.price;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        cart: [...tempCart]\r\n      };\r\n    }, this.addTotals());\r\n  };\r\n\r\n  // Subtract one from the selected item in cart\r\n  decrement = id => {\r\n    // Get cart values from the current state\r\n    let tempCart = [...this.state.cart];\r\n    const decProduct = tempCart.find(item => {\r\n      return item.id === id;\r\n    });\r\n\r\n    // Get index of item to be decremented\r\n    const index = tempCart.indexOf(decProduct);\r\n    const product = tempCart[index];\r\n\r\n    // Subtract from the count and total\r\n    product.count = product.count - 1;\r\n    if (product.count === 0) {\r\n      this.removeItem(id);\r\n    } else {\r\n      product.total = product.count * product.price;\r\n\r\n      this.setState(() => {\r\n        return {\r\n          cart: [...tempCart]\r\n        };\r\n      }, this.addTotals());\r\n    }\r\n  };\r\n\r\n  // Remove a single item from cart\r\n  removeItem = id => {\r\n    // Get products from the current state\r\n    let tempProducts = [...this.state.products];\r\n\r\n    // Get cart values from the current state\r\n    let tempCart = [...this.state.cart];\r\n\r\n    tempCart = tempCart.filter(item => item.id !== id);\r\n\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    let removeProduct = tempProducts[index];\r\n\r\n    removeProduct.inCart = false;\r\n    removeProduct.count = 0;\r\n    removeProduct.total = 0;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          cart: [...tempCart],\r\n          product: [...tempProducts]\r\n        };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  // Clear the cart and get new copies of object data\r\n  clearCart = id => {\r\n    this.setState(\r\n      () => {\r\n        return { cart: [] };\r\n      },\r\n      () => {\r\n        this.setProducts();\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  // Retrieve and calculate totals from all items in cart\r\n  getTotals = () => {\r\n    // Retrieve the current sub total from current state\r\n    let subTotal = 0;\r\n    this.state.cart.map(item => (subTotal += item.total));\r\n\r\n    // Calculate VAT from sub total\r\n    const tempVAT = subTotal * 0.2;\r\n    const VAT = parseFloat(tempVAT.toFixed(2));\r\n\r\n    // Add VAT and sub total together for total\r\n    const tempTotal = subTotal + VAT;\r\n    const total = parseFloat(tempTotal.toFixed(2));\r\n\r\n    return {\r\n      subTotal,\r\n      VAT,\r\n      total\r\n    };\r\n  };\r\n\r\n  // Retrieve totals previously calculated and update the state\r\n  addTotals = () => {\r\n    const totals = this.getTotals();\r\n\r\n    this.setState(() => {\r\n      return {\r\n        cartSubTotal: totals.subTotal,\r\n        cartVAT: totals.VAT,\r\n        cartTotal: totals.total\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ProductContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          handleDetail: this.handleDetail,\r\n          addToCart: this.addToCart,\r\n          openModal: this.openModal,\r\n          closeModal: this.closeModal,\r\n          increment: this.increment,\r\n          decrement: this.decrement,\r\n          removeItem: this.removeItem,\r\n          clearCart: this.clearCart\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </ProductContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport { ProductProvider, ProductConsumer };\r\n"]},"metadata":{},"sourceType":"module"}