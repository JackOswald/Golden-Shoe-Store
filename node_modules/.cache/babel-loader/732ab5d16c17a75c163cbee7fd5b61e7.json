{"ast":null,"code":"import _defineProperty from \"E:\\\\Jack\\\\Documents\\\\Programming\\\\shoe-store\\\\Golden-Shoe-Store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\Jack\\\\Documents\\\\Programming\\\\shoe-store\\\\Golden-Shoe-Store\\\\src\\\\context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { storeProducts, detailProduct } from \"./data\"; // Creating a provider and consumer for the information\n\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      detailProduct: detailProduct,\n      cart: [],\n      modalOpen: false,\n      modalProduct: detailProduct,\n      cartSubTotal: 0,\n      cartVAT: 0,\n      cartTotal: 0\n    };\n\n    this.setFeaturedProducts = id => {\n      //let tempProducts = []\n      const tempProducts = this.state.products.find(item => item.id === id);\n      console.log(tempProducts);\n      this.setState(() => {\n        return {\n          product: tempProducts\n        };\n      });\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = _objectSpread({}, item);\n\n        tempProducts = [...tempProducts, singleItem];\n      });\n      console.log(tempProducts);\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: tempProducts,\n          cart: [...this.state.cart, product],\n          detailProduct: _objectSpread({}, product)\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.openModal = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          modalProduct: product,\n          modalOpen: true\n        };\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState(() => {\n        return {\n          modalOpen: false\n        };\n      });\n    };\n\n    this.increment = id => {\n      // Get cart values from the current state\n      let tempCart = [...this.state.cart];\n      const incProduct = tempCart.find(item => {\n        return item.id === id;\n      }); // Get index of item to be incremented\n\n      const index = tempCart.indexOf(incProduct);\n      const product = tempCart[index]; // Add to the count and total\n\n      product.count = product.count + 1;\n      product.total = product.count * product.price;\n      this.setState(() => {\n        return {\n          cart: [...tempCart]\n        };\n      }, this.addTotals());\n    };\n\n    this.decrement = id => {\n      // Get cart values from the current state\n      let tempCart = [...this.state.cart];\n      const decProduct = tempCart.find(item => {\n        return item.id === id;\n      }); // Get index of item to be decremented\n\n      const index = tempCart.indexOf(decProduct);\n      const product = tempCart[index]; // Subtract from the count and total\n\n      product.count = product.count - 1;\n\n      if (product.count === 0) {\n        this.removeItem(id);\n      } else {\n        product.total = product.count * product.price;\n        this.setState(() => {\n          return {\n            cart: [...tempCart]\n          };\n        }, this.addTotals());\n      }\n    };\n\n    this.removeItem = id => {\n      // Get products from the current state\n      let tempProducts = [...this.state.products]; // Get cart values from the current state\n\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removeProduct = tempProducts[index];\n      removeProduct.inCart = false;\n      removeProduct.count = 0;\n      removeProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          product: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n      });\n    };\n\n    this.clearCart = id => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.setProducts();\n        this.addTotals();\n      });\n    };\n\n    this.getTotals = () => {\n      // Retrieve the current sub total from current state\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total); // Calculate VAT from sub total\n\n      const tempVAT = subTotal * 0.2;\n      const VAT = parseFloat(tempVAT.toFixed(2)); // Add VAT and sub total together for total\n\n      const tempTotal = subTotal + VAT;\n      const total = parseFloat(tempTotal.toFixed(2));\n      return {\n        subTotal,\n        VAT,\n        total\n      };\n    };\n\n    this.addTotals = () => {\n      const totals = this.getTotals();\n      this.setState(() => {\n        return {\n          cartSubTotal: totals.subTotal,\n          cartVAT: totals.VAT,\n          cartTotal: totals.total\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setFeaturedProducts(4);\n  }\n\n  render() {\n    return React.createElement(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        openModal: this.openModal,\n        closeModal: this.closeModal,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart,\n        setFeaturedProducts: this.setFeaturedProducts\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["E:/Jack/Documents/Programming/shoe-store/Golden-Shoe-Store/src/context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","modalOpen","modalProduct","cartSubTotal","cartVAT","cartTotal","setFeaturedProducts","id","tempProducts","find","item","console","log","setState","product","setProducts","forEach","singleItem","getItem","handleDetail","addToCart","index","indexOf","inCart","count","price","total","addTotals","openModal","closeModal","increment","tempCart","incProduct","decrement","decProduct","removeItem","filter","removeProduct","clearCart","getTotals","subTotal","map","tempVAT","VAT","parseFloat","toFixed","tempTotal","totals","componentDidMount","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { storeProducts, detailProduct } from \"./data\";\r\n\r\n// Creating a provider and consumer for the information\r\nconst ProductContext = React.createContext();\r\n\r\nclass ProductProvider extends Component {\r\n  state = {\r\n    products: [],\r\n    detailProduct: detailProduct,\r\n    cart: [],\r\n    modalOpen: false,\r\n    modalProduct: detailProduct,\r\n    cartSubTotal: 0,\r\n    cartVAT: 0,\r\n    cartTotal: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setFeaturedProducts(4);\r\n  }\r\n\r\n  setFeaturedProducts = id => {\r\n    //let tempProducts = []\r\n    const tempProducts = this.state.products.find(item => item.id === id);\r\n    console.log(tempProducts);\r\n    this.setState(() => {\r\n      return { product: tempProducts };\r\n    });\r\n  };\r\n\r\n  // Obtain copy of values from data.js\r\n  setProducts = () => {\r\n    let tempProducts = [];\r\n    storeProducts.forEach(item => {\r\n      const singleItem = { ...item };\r\n      tempProducts = [...tempProducts, singleItem];\r\n    });\r\n    console.log(tempProducts);\r\n    this.setState(() => {\r\n      return { products: tempProducts };\r\n    });\r\n  };\r\n\r\n  // Get the id values of an item\r\n  getItem = id => {\r\n    const product = this.state.products.find(item => item.id === id);\r\n    return product;\r\n  };\r\n\r\n  // Set the template product to our current product\r\n  handleDetail = id => {\r\n    const product = this.getItem(id);\r\n    this.setState(() => {\r\n      return { detailProduct: product };\r\n    });\r\n  };\r\n\r\n  // Add the specific object to cart using id\r\n  addToCart = id => {\r\n    let tempProducts = [...this.state.products];\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    const product = tempProducts[index];\r\n    product.inCart = true;\r\n    product.count = 1;\r\n    const price = product.price;\r\n    product.total = price;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          products: tempProducts,\r\n          cart: [...this.state.cart, product],\r\n          detailProduct: { ...product }\r\n        };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  // Open modal when clicked on image\r\n  openModal = id => {\r\n    const product = this.getItem(id);\r\n    this.setState(() => {\r\n      return { modalProduct: product, modalOpen: true };\r\n    });\r\n  };\r\n\r\n  // Close modal when clicked back or checkout\r\n  closeModal = () => {\r\n    this.setState(() => {\r\n      return { modalOpen: false };\r\n    });\r\n  };\r\n\r\n  // Add one to the selected item in cart\r\n  increment = id => {\r\n    // Get cart values from the current state\r\n    let tempCart = [...this.state.cart];\r\n    const incProduct = tempCart.find(item => {\r\n      return item.id === id;\r\n    });\r\n\r\n    // Get index of item to be incremented\r\n    const index = tempCart.indexOf(incProduct);\r\n    const product = tempCart[index];\r\n\r\n    // Add to the count and total\r\n    product.count = product.count + 1;\r\n    product.total = product.count * product.price;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        cart: [...tempCart]\r\n      };\r\n    }, this.addTotals());\r\n  };\r\n\r\n  // Subtract one from the selected item in cart\r\n  decrement = id => {\r\n    // Get cart values from the current state\r\n    let tempCart = [...this.state.cart];\r\n    const decProduct = tempCart.find(item => {\r\n      return item.id === id;\r\n    });\r\n\r\n    // Get index of item to be decremented\r\n    const index = tempCart.indexOf(decProduct);\r\n    const product = tempCart[index];\r\n\r\n    // Subtract from the count and total\r\n    product.count = product.count - 1;\r\n    if (product.count === 0) {\r\n      this.removeItem(id);\r\n    } else {\r\n      product.total = product.count * product.price;\r\n\r\n      this.setState(() => {\r\n        return {\r\n          cart: [...tempCart]\r\n        };\r\n      }, this.addTotals());\r\n    }\r\n  };\r\n\r\n  // Remove a single item from cart\r\n  removeItem = id => {\r\n    // Get products from the current state\r\n    let tempProducts = [...this.state.products];\r\n\r\n    // Get cart values from the current state\r\n    let tempCart = [...this.state.cart];\r\n\r\n    tempCart = tempCart.filter(item => item.id !== id);\r\n\r\n    const index = tempProducts.indexOf(this.getItem(id));\r\n    let removeProduct = tempProducts[index];\r\n\r\n    removeProduct.inCart = false;\r\n    removeProduct.count = 0;\r\n    removeProduct.total = 0;\r\n\r\n    this.setState(\r\n      () => {\r\n        return {\r\n          cart: [...tempCart],\r\n          product: [...tempProducts]\r\n        };\r\n      },\r\n      () => {\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  // Clear the cart and get new copies of object data\r\n  clearCart = id => {\r\n    this.setState(\r\n      () => {\r\n        return { cart: [] };\r\n      },\r\n      () => {\r\n        this.setProducts();\r\n        this.addTotals();\r\n      }\r\n    );\r\n  };\r\n\r\n  // Retrieve and calculate totals from all items in cart\r\n  getTotals = () => {\r\n    // Retrieve the current sub total from current state\r\n    let subTotal = 0;\r\n    this.state.cart.map(item => (subTotal += item.total));\r\n\r\n    // Calculate VAT from sub total\r\n    const tempVAT = subTotal * 0.2;\r\n    const VAT = parseFloat(tempVAT.toFixed(2));\r\n\r\n    // Add VAT and sub total together for total\r\n    const tempTotal = subTotal + VAT;\r\n    const total = parseFloat(tempTotal.toFixed(2));\r\n\r\n    return {\r\n      subTotal,\r\n      VAT,\r\n      total\r\n    };\r\n  };\r\n\r\n  // Retrieve totals previously calculated and update the state\r\n  addTotals = () => {\r\n    const totals = this.getTotals();\r\n\r\n    this.setState(() => {\r\n      return {\r\n        cartSubTotal: totals.subTotal,\r\n        cartVAT: totals.VAT,\r\n        cartTotal: totals.total\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ProductContext.Provider\r\n        value={{\r\n          ...this.state,\r\n          handleDetail: this.handleDetail,\r\n          addToCart: this.addToCart,\r\n          openModal: this.openModal,\r\n          closeModal: this.closeModal,\r\n          increment: this.increment,\r\n          decrement: this.decrement,\r\n          removeItem: this.removeItem,\r\n          clearCart: this.clearCart,\r\n          setFeaturedProducts: this.setFeaturedProducts\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </ProductContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport { ProductProvider, ProductConsumer };\r\n"]},"metadata":{},"sourceType":"module"}